const User = require("../models/User");
const Post = require("../models/Post")
const nodemailer = require('nodemailer');
// const sendEmail = require('../services/emailService');

const userController = {
  //get all users
  getAllUsers: async (req, res) => {
    try {
      const users = await User.find();
      res.status(200).json(users);
    } catch (err) {
      // res.status(500).json(err);
      console.error("Error details: ", err);  // In chi ti·∫øt l·ªói ra console
      res.status(500).json({ error: "An error occurred", details: err.message });
    }
  },
 getUserProfile : async (req, res) => {
  try {
    const userId = req.user.id;
    
    console.log("üîç getUserProfile: Getting user profile for userId:", userId);
    
    const user = await User.findById(userId).select('-password');
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found"
      });
    }
    
    console.log("‚úÖ getUserProfile: User profile found:", {
      id: user._id,
      username: user.username,
      postQuota: user.postQuota,
      email: user.email
    });
    
    res.status(200).json({
      success: true,
      data: user
    });
  } catch (error) {
    console.error("getUserProfile error:", error);
    res.status(500).json({
      success: false,
      message: "Error getting user profile",
      error: error.message
    });
  }
},

  //delete user
  deleteUser: async (req, res) => {
    try {
      const user = await User.findByIdAndDelete(req.params.id);
      res.status(200).json("Delete successfully!");
    } catch (err) {
      res.status(500).json(err);
    }
  },

  // Kh√≥a/M·ªü kh√≥a t√†i kho·∫£n v√† g·ª≠i email th√¥ng b√°o
  toggleBlockUser: async (req, res) => {
    try {
      const userId = req.params.id;
      const user = await User.findById(userId);

      if (!user) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
      }

      // ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i kh√≥a/m·ªü kh√≥a
      user.profile.isBlocked = !user.profile.isBlocked;
      await user.save();

      // G·ª≠i email th√¥ng b√°o
      const subject = user.profile.isBlocked
        ? "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a"
        : "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a";

      // N·ªôi dung email
      const html = user.profile.isBlocked
        ? `
        <p>Ch√†o b·∫°n,</p>
        <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a do vi ph·∫°m ch√≠nh s√°ch ho·∫∑c h√†nh vi kh√¥ng tu√¢n th·ªß c√°c ƒëi·ªÅu kho·∫£n d·ªãch v·ª• c·ªßa ch√∫ng t√¥i. ƒê√¢y l√† m·ªôt quy·∫øt ƒë·ªãnh nghi√™m t√∫c v√† ƒë∆∞·ª£c ƒë∆∞a ra sau khi xem x√©t k·ªπ l∆∞·ª°ng c√°c ho·∫°t ƒë·ªông c·ªßa b·∫°n.</p>
        <p>Vui l√≤ng ki·ªÉm tra k·ªπ l·∫°i c√°c h√†nh ƒë·ªông c·ªßa m√¨nh ƒë·ªÉ hi·ªÉu r√µ l√Ω do v√† tr√°nh t√°i ph·∫°m trong t∆∞∆°ng lai. N·∫øu b·∫°n nghƒ© ƒë√¢y l√† m·ªôt s·ª± nh·∫ßm l·∫´n ho·∫∑c c·∫ßn gi·∫£i th√≠ch th√™m, h√£y li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ kh√°ch h√†ng c·ªßa ch√∫ng t√¥i qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i d∆∞·ªõi ƒë√¢y:</p>
        <ul>
          <li>Email h·ªó tr·ª£: PhongTroXinh@gmail.com</li>
          <li>S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£: 04564789</li>
        </ul>
        <p>Ch√∫ng t√¥i s·∫Ω l√†m vi·ªác c√πng b·∫°n ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y m·ªôt c√°ch nhanh ch√≥ng v√† c√¥ng b·∫±ng.</p>
        <img src="https://i.pinimg.com/736x/51/46/0c/51460cf91031e29fe2950c7464b28c62.jpg" alt="Account Blocked" width="600" />
        <p>Tr√¢n tr·ªçng, <br> ƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa Ph√≤ng tr·ªç xinh</p>
      `
        : `
        <p>Ch√†o b·∫°n,</p>
        <p>Ch√∫ng t√¥i vui m·ª´ng th√¥ng b√°o r·∫±ng t√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a th√†nh c√¥ng v√† b·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng t·∫•t c·∫£ c√°c d·ªãch v·ª• c·ªßa ch√∫ng t√¥i m√† kh√¥ng g·∫∑p b·∫•t k·ª≥ h·∫°n ch·∫ø n√†o.</p>
        <p>Ch√∫ng t√¥i r·∫•t ti·∫øc v√¨ b·∫•t k·ª≥ s·ª± b·∫•t ti·ªán n√†o m√† t√¨nh tr·∫°ng t√†i kho·∫£n ƒë√£ g√¢y ra v√† hy v·ªçng r·∫±ng b·∫°n s·∫Ω ti·∫øp t·ª•c t·∫≠n h∆∞·ªüng tr·∫£i nghi·ªám tuy·ªát v·ªùi c√πng ch√∫ng t√¥i.</p>
        <p>N·∫øu b·∫°n g·∫∑p b·∫•t k·ª≥ v·∫•n ƒë·ªÅ g√¨ ho·∫∑c c·∫ßn h·ªó tr·ª£ th√™m, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ qua c√°c k√™nh sau:</p>
        <ul>
          <li>Email h·ªó tr·ª£: PhongTroXinh@gmail.com</li>
          <li>S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£: 04564789</li>
        </ul>
        <img src="https://i.pinimg.com/736x/a5/9a/66/a59a663935620f7a8b227675652bd5ac.jpg" alt="Account Unblocked" width="600" />
        <p>Ch√∫c b·∫°n c√≥ m·ªôt ng√†y tuy·ªát v·ªùi v√† tr·∫£i nghi·ªám d·ªãch v·ª• c·ªßa ch√∫ng t√¥i m·ªôt c√°ch tr·ªçn v·∫πn!</p>
        <p>Tr√¢n tr·ªçng, <br> ƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa Ph√≤ng tr·ªç xinh</p>
      `;

      // C·∫•u h√¨nh email
      const transporter = nodemailer.createTransport({
        service: "Gmail",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });

      const mailOptions = {
        from: `"Ph√≤ng tr·ªç xinh" <${process.env.EMAIL_USER}>`,
        to: user.email,
        subject,
        html,
      };

      // G·ª≠i email
      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.error("G·ª≠i email th·∫•t b·∫°i:", error);
          return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi g·ª≠i email." });
        }
        console.log("Email sent: " + info.response);
        res.status(200).json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† email th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i." });
      });
    } catch (error) {
      console.error("Error details: ", error);
      res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói", details: error.message });
    }
  },

  detectSuspiciousActivity: async (userId, reason) => {
    try {
      const user = await User.findById(userId);
      if (!user || user.profile.isBlocked) return;

      // N·∫øu ch∆∞a c√≥ m·∫£ng suspiciousActivityCount, kh·ªüi t·∫°o m·∫∑c ƒë·ªãnh
      if (!user.suspiciousActivityCount || user.suspiciousActivityCount.length === 0) {
        user.suspiciousActivityCount = [{
          loginCount: 0,
          reviewCount: 0
        }];
      }

      const suspiciousData = user.suspiciousActivityCount[0];

      // TƒÉng ƒë√∫ng lo·∫°i count d·ª±a v√†o reason
      if (reason === "C·ªë g·∫Øng ƒëƒÉng nh·∫≠p nhi·ªÅu l·∫ßn") {
        suspiciousData.loginCount += 1;

        // Ki·ªÉm tra n·∫øu login qu√° 5 l·∫ßn th√¨ kh√≥a
        if (suspiciousData.loginCount >= 5) {
          user.profile.isBlocked = true;
        }

      } else if (reason === "Spam review") {
        suspiciousData.reviewCount += 1;

        if (suspiciousData.reviewCount >= 2) {
          user.profile.isBlocked = true;
        }
      }

      // N·∫øu b·ªã kh√≥a th√¨ g·ª≠i email
      if (user.profile.isBlocked) {
        const subject = "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a";

        const html = `
          <p>Ch√†o b·∫°n,</p>
          <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã <strong>t·ª± ƒë·ªông kh√≥a</strong> do ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng ng·ªù: ${reason}.</p>   
          <p>Vui l√≤ng ki·ªÉm tra k·ªπ l·∫°i c√°c h√†nh ƒë·ªông c·ªßa m√¨nh ƒë·ªÉ hi·ªÉu r√µ l√Ω do v√† tr√°nh t√°i ph·∫°m trong t∆∞∆°ng lai. N·∫øu b·∫°n nghƒ© ƒë√¢y l√† m·ªôt s·ª± nh·∫ßm l·∫´n ho·∫∑c c·∫ßn gi·∫£i th√≠ch th√™m, h√£y li√™n h·ªá v·ªõi b·ªô ph·∫≠n h·ªó tr·ª£ kh√°ch h√†ng c·ªßa ch√∫ng t√¥i qua email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i d∆∞·ªõi ƒë√¢y:</p>
          <ul>
            <li>Email h·ªó tr·ª£: PhongTroXinh@gmail.com</li>
            <li>S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£: 04564789</li>
          </ul>
          <p>Ch√∫ng t√¥i s·∫Ω l√†m vi·ªác c√πng b·∫°n ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y m·ªôt c√°ch nhanh ch√≥ng v√† c√¥ng b·∫±ng.</p>
          <img src="https://i.pinimg.com/736x/51/46/0c/51460cf91031e29fe2950c7464b28c62.jpg" alt="Account Blocked" width="600" />
          <p>Tr√¢n tr·ªçng, <br> ƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa Ph√≤ng tr·ªç xinh</p>
        `;

        const transporter = nodemailer.createTransport({
          service: "Gmail",
          auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS,
          },
        });

        const mailOptions = {
          from: `"Ph√≤ng tr·ªç xinh" <${process.env.EMAIL_USER}>`,
          to: user.email,
          subject,
          html,
        };

        transporter.sendMail(mailOptions, (error, info) => {
          if (error) {
            console.error("G·ª≠i email th·∫•t b·∫°i:", error);
          } else {
            console.log("Email sent: " + info.response);
          }
        });
      }

      await user.save();

    } catch (error) {
      console.error("L·ªói trong detectSuspiciousActivity:", error);
      throw error;
    }
  },


  updateUserProfile: async (req, res) => {
    try {
      const userId = req.params.id;
      const { name, phone, address, bio } = req.body;

      let picture = "";
      if (req.file) {
        picture = req.file.path; // Path c·ªßa ·∫£nh l∆∞u tr·ªØ tr√™n Cloudinary
      }

      let updatedFields = {
        username: name,
        "profile.phone": phone,
        "profile.address": address,
        "profile.bio": bio,
        "profile.picture": picture
      };

      const updatedUser = await User.findByIdAndUpdate(
        userId,
        { $set: updatedFields },
        { new: true, runValidators: true }
      );

      if (!updatedUser) {
        return res.status(404).json({ message: "User not found" });
      }
      res.status(200).json({
        message: "User profile updated successfully",
        user: updatedUser,
      });
    } catch (error) {
      console.error("Error updating user profile:", error);
      res.status(500).json({
        message: "Server error",
        error: error.message,
      });
    }
  },

  markNotificationAsRead: async (req, res) => {
    try {
      const { notificationId } = req.params;
      const userId = req.user.id;

      // T√¨m ng∆∞·ªùi d√πng
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
      }

      // T√¨m th√¥ng b√°o trong m·∫£ng notifications
      const notification = user.notifications.find(notification => notification._id.toString() === notificationId);
      if (!notification) {
        return res.status(404).json({ message: 'Th√¥ng b√°o kh√¥ng t·ªìn t·∫°i' });
      }

      // ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
      notification.status = 'read';
      await user.save();

      res.status(200).json({
        message: 'Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc',
        notification,
      });
    } catch (error) {
      res.status(500).json({ message: 'L·ªói server', error: error.message });
    }
  },
  getNotificationsByUser: async (req, res) => {
    const userId = req.user.id; // L·∫•y user ID t·ª´ middleware verifyToken

    try {
      // T√¨m user d·ª±a tr√™n ID
      const user = await User.findById(userId);

      if (!user) {
        return res.status(404).json({ message: 'User not found' });
      }

      // L·∫•y danh s√°ch th√¥ng b√°o t·ª´ user
      const notifications = user.notifications || [];

      // Tr·∫£ danh s√°ch th√¥ng b√°o, s·∫Øp x·∫øp theo th·ªùi gian (m·ªõi nh·∫•t tr∆∞·ªõc)
      const sortedNotifications = notifications.sort(
        (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
      );

      res.status(200).json({
        message: 'Notifications fetched successfully',
        notifications: sortedNotifications,
      });
    } catch (error) {
      console.error('Error fetching notifications:', error);
      res.status(500).json({ message: 'Internal Server Error' });
    }
  },

  viewPost: async (req, res) => {
    try {
      const userId = req.params.userId;
      const postId = req.params.postId;

      if (!userId) return res.status(401).json({ message: 'Unauthorized' });

      const user = await User.findById(userId);
      const post = await Post.findById(postId);

      if (!user || !post) {
        return res.status(404).json({ message: 'User ho·∫∑c Post kh√¥ng t·ªìn t·∫°i' });
      }
      const hasViewed = user.viewed.some(
        (viewedPostId) => viewedPostId.toString() === postId
      );

      if (!hasViewed) {
        user.viewed.push(postId);
        post.views += 1;

        await user.save();
        await post.save();
      }

      return res.status(200).json({
        message: 'C·∫≠p nh·∫≠t l∆∞·ª£t xem th√†nh c√¥ng',
        views: post.views,
      });
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t l∆∞·ª£t xem:', error);
      return res.status(500).json({ message: 'L·ªói server' });
    }
  },

  getViewedPosts: async (req, res) => {
    try {
      const userId = req.params.userId;

      if (!userId) return res.status(401).json({ message: 'Unauthorized' });
      const user = await User.findById(userId).populate('viewed');

      if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });

      return res.status(200).json({
        viewedPosts: user.viewed,
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch b√†i ƒëƒÉng ƒë√£ xem:', error);
      return res.status(500).json({ message: 'L·ªói server' });
    }
  }
}

module.exports = userController;