const { autoReplyQueue } = require('./bullmq');
const rules = require('../rules');
const { getReplyFromAI } = require('../aiProxy');
const { getOnlineAdmins } = require("../filterOnlineAdmins");
const mongoose = require('mongoose');
const Conversation = require('../../models/Conversation');
const Message = require('../../models/Message');

/**
 * H√†m x·ª≠ l√Ω m·ªói tin nh·∫Øn ƒë·∫øn t·ª´ client
 * @param {import('socket.io').Server} io      - socket‚Äëserver to√†n c·ª•c
 * @param {string} socketId                    - id phi√™n client ƒëang chat
 * @param {string} incomingMessage             - n·ªôi dung ng∆∞·ªùi d√πng g·ª≠i
 */
botId = process.env.BOT_ID || null; // id bot, n·∫øu c√≥

async function handleIncomingMessage(io, socketId, { sender, content }, onlineUsers) {
    try {
        // 1. T√¨m ho·∫∑c t·∫°o conversation user + bot (ho·∫∑c user ƒë∆°n gi·∫£n)
        const participantIds = [mongoose.Types.ObjectId(sender)];
        if (botId) participantIds.push(mongoose.Types.ObjectId(botId));
        participantIds.sort();

        let conversation;

        // N·∫øu c√≥ bot, t√¨m conversation c√≥ c·∫£ user v√† bot
        if (botId) {
            conversation = await Conversation.findOne({
                participants: { $all: participantIds, $size: participantIds.length },
                isConversationSupport: true
            });
        } else {
            // N·∫øu kh√¥ng c√≥ bot, t√¨m m·ªçi conversation c√≥ user tham gia v√† isConversationSupport: true
            conversation = await Conversation.findOne({
                participants: mongoose.Types.ObjectId(sender),
                isConversationSupport: true
            });
        }

        if (!conversation) {
            conversation = await Conversation.create({
                participants: participantIds,
                isConversationSupport: true
            });
        }

        // 2. Th·ª≠ tr·∫£ l·ªùi theo rule
        let reply = null;
        let canBotReply = conversation.adminStatus === "done";
        if (canBotReply) {
            reply = matchRule(content);
            if (!reply) {
                reply = await getReplyFromAI(content);
            }
        }

        // 4. Ki·ªÉm tra xem AI c√≥ tr·∫£ l·ªùi ƒë∆∞·ª£c kh√¥ng
        const adminReplyMarker = "Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y, vui l√≤ng ƒë·ª£i admin ph·∫£n h·ªìi.";
        const needsAdmin = !reply || reply.toLowerCase().includes(adminReplyMarker.toLowerCase());

        // 5. L∆∞u tin nh·∫Øn user g·ª≠i
        const userMessage = await Message.create({
            conversationId: conversation._id,
            sender,
            receiver: null, // ch∆∞a x√°c ƒë·ªãnh admin
            content,
            timestamp: new Date(),
        });

        // 6. N·∫øu c·∫ßn admin x·ª≠ l√Ω (AI kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c)
        if (needsAdmin) {
            if (!conversation.claimedByAdmin) {
                const onlineAdminIds = getOnlineAdmins(onlineUsers);
                conversation.lastMessage = userMessage._id;
                conversation.updatedAt = new Date();
                conversation.adminStatus = "processing";

                await conversation.save();

                const populatedConversation = await Conversation.findById(conversation._id)
                    .populate("participants", "_id username email profile.picture profile.isOnline")
                    .populate("lastMessage");

                for (const adminId of onlineAdminIds) {
                    const adminSocketId = onlineUsers[adminId];
                    if (adminSocketId) {
                        console.log(`üîî Notify admin ${adminId}`, populatedConversation);
                        io.to(adminSocketId).emit("adminNotifyMessage", populatedConversation);
                    } else {
                        console.log(`‚ùå No socket for admin ${adminId}`);
                    }
                }
            } else {
                const adminId = conversation.claimedByAdmin.toString();
                conversation.adminStatus = "processing";
                const adminSocketId = onlineUsers[adminId];
                if (adminSocketId) {
                    conversation.lastMessage = userMessage._id;
                    conversation.updatedAt = new Date();
                    conversation.readBy = [sender];
                    await conversation.save();

                    const populatedConversation = await Conversation.findById(conversation._id)
                        .populate("participants", "_id username email profile.picture profile.isOnline")
                        .populate("lastMessage");

                    console.log(`üì• Send receiveMessage to admin ${adminId}`, populatedConversation);
                    io.to(adminSocketId).emit("receiveMessage", {
                        message: userMessage,
                        userIds: populatedConversation.participants.map(p => p._id.toString()),
                        updatedConversation: populatedConversation
                    });
                } else {
                    console.log(`‚ùå No socket found for admin ${adminId}`);
                }
            }
            return;
        }

        // 7. N·∫øu AI tr·∫£ l·ªùi ƒë∆∞·ª£c, l∆∞u tin tr·∫£ l·ªùi v√†o DB
        const replySenderId = botId || null; // bot g·ª≠i, ho·∫∑c null admin ·∫£o
        const replyMessage = await Message.create({
            conversationId: conversation._id,
            sender: replySenderId,
            receiver: sender,
            content: reply,
            timestamp: new Date(),
        });

        // 8. C·∫≠p nh·∫≠t conversation lastMessage v√† tr·∫°ng th√°i ƒë·ªçc
        conversation.lastMessage = replyMessage._id;
        conversation.updatedAt = new Date();
        conversation.readBy = [sender];
        await conversation.save();

        // 9. ƒê∆∞a reply v√†o queue g·ª≠i message
        await autoReplyQueue.add(
            'sendReply',
            { socketId, reply },
            { attempts: 3, backoff: 2000 }
        );

        // 10. G·ª≠i realtime cho user
        io.to(socketId).emit("receiveMessage", replyMessage);

    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω tin nh·∫Øn:", error);
    }
}

const resolveConversation = async (io, conversationId, adminSocket) => {
    try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i adminStatus th√†nh 'done'
        await Conversation.findByIdAndUpdate(conversationId, {
            adminStatus: "done",
        });

        // Truy v·∫•n l·∫°i conversation ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† populate d·ªØ li·ªáu
        const updatedConversation = await Conversation.findById(conversationId)
            .populate({
                path: "participants",
                select: "username profile.picture profile.isOnline",
            })
            .populate({
                path: "lastMessage",
            });

        if (!updatedConversation) {
            return adminSocket.emit("error", {
                message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán.",
            });
        }

        // Emit ƒë·∫øn t·∫•t c·∫£ c√°c socket ƒëang theo d√µi cu·ªôc tr√≤ chuy·ªán n√†y
        io.emit("conversationResolved", {
            conversation: updatedConversation,
            message: "Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n t·∫•t.",
        });

    } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω conversationResolved:", error);
        adminSocket.emit("error", {
            message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t cu·ªôc tr√≤ chuy·ªán.",
        });
    }
};

/* ----------------- Helpers ----------------- */
function matchRule(message) {
    for (const rule of rules) {
        if (rule.pattern.test(message)) return rule.response;
    }
    return null;
}

module.exports = { handleIncomingMessage, resolveConversation };